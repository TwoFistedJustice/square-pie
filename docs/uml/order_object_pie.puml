@startuml
'https://plantuml.com/class-diagram


namespace fulfillment {
.Order_Fulfillment .. .build_shipment
.Order_Fulfillment .. .build_pickup
}

namespace order {
.Order_Object o.. fardelCollections

object fardelCollections{
  + fulfillments
  + discounts
  + pricing_options
  + service_charges
  + taxes
  + line_items
}

}


class Order_Object{
this._fardel
this.configuration
==
Simple Getters
==
Simple Setters
==
Complex Setters (Computed Properties)
..

+ pricing_options (obj)
..
- verify ARG and fardel structure
- push ARG onto array
--
+ service_charges
+ discounts
+ taxes
+ fulfillments
+ line_items
..
- verify fardel structure
- push ARG onto array


==
Private METHODS
- #money(amt, currency)
..
-convert amt to number
- verify ARG structures
- RETURN compliant object
==
BUILDER METHODS

+ build_state()
..
- call state setter with FIXED values

+ build_service_charge_amount(amount, currency)
+ build_service_charge_applied(amount, currency)
- build compliant object
- call setter
..

..
+ build_discount()
..
This may merit its own class ...

==
STANDARD METHODS
+ make()
==
STUB METHODS
+ build_line_item()
..
+ pricing()
..
}

class Order_Fulfillment {
this._fardel
this.configuration
==
Simple Getters
==
Simple Setters
==
Complex Setters (none))
==
Private METHODS
+ #proposed_state()
+ #reserved_state()
+ #prepared_state()
+ #completed_state()
+ #canceled_state()
+ #failed_state()

..
- verify and set fardel structure
- calls state setter with FIXED value

+ #time_date(fulfillment, key, time)
- verify RFC3399 format of `time`
- verify and set `fulfillment` structure
- `key` defines a property on `fulfillment`, `time` is the value

+ #note(fulfillment, key, note)
- verify length of `key`
- verify and set `fulfillment` structure
- `key` defines a property on `fulfillment`, `note` is the value

+ #schedule_type(fulfillment, key, value)
- verify and set `fulfillment` structure
- `key` defines a property on `fulfillment`, `value` is the value

+ #recipient(fulfillment)
- create a set of undefined recipient properties on the pickup or shipment details property of fardel
- adds a set of curried setters for recipient properties to the shipment and pickup builder mehtods

==
BUILDER METHODS
+ build_shipment()
- too complicated. Can be simplified.
- REFACTOR
- Have it access FARDEL directly mitigate need for `add` method

+ build_pickup()
- same problem as build_shipment

==
STANDARD METHODS
+ make() - TODO
==
STUB METHODS
cancel_order()

}


object build_shipment {
+ state_propose
+ state_reserve
+ state_prepare
+ state_complete
+ state_cancel
+ state_fail
+ cancel_reason | string |
+ auto_complete_duration |time |
+ expires_at |time |
+ pickup_at |time |
+ pickup_window_duration |time |
+ prep_time_duration |time |
+ note |string |
+ asap
+ scheduled
+ clear_curbside

}

object build_pickup {
+ state_propose
+ state_reserve
+ state_prepare
+ state_complete
+ state_cancel
+ state_fail
+ expected_shipped_at | time |
+ cancel_reason | string |
+ failure_reason | string |
+ tracking_number | string |
+ shipping_note | string |
+ tracking_url | string |
+ shipping_type | string |
+ carrier | string |
}


@enduml